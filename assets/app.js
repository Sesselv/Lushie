import "./bootstrap.js";
// import "/app.css";
document.addEventListener("turbo:load", () => {
    /*
     * Welcome to your app's main JavaScript file!
     *
     * This file will be included onto the page via the importmap() Twig function,
     * which should already be in your base.html.twig.
     */

    // import "./styles/app.scss";

    console.log(
        "This log comes from assets/app.js - welcome to AssetMapper! ðŸŽ‰"
    );
    const bar = document.querySelector(".animated-bar");
    if (bar) {
        const content = document.createElement("div");
        content.className = "animated-content";
        content.innerHTML = bar.innerHTML + bar.innerHTML;
        bar.innerHTML = "";
        bar.appendChild(content);
    }

    const soapElements = document.querySelectorAll(".card p");

    soapElements.forEach((el) => {
        const text = el.textContent;
        const firstSentence = text.split(/([.!?])\s/)[0];
        el.textContent =
            firstSentence + (text.length > firstSentence.length ? "." : "");
    });

    document.querySelectorAll(".fav-icon").forEach((icon) => {
        icon.addEventListener("click", () => {
            const soapId = icon.dataset.soapId;

            fetch(`/favorite/soap/${soapId}`, { method: "POST" }).then(() => {
                icon.classList.toggle("active");
            });
        });
    });
});

//Attends que tout le HTML de la page soit chargÃ© avant dâ€™exÃ©cuter le script.
//SÃ©lectionne le premier Ã©lÃ©ment du DOM qui possÃ¨de la classe .rating.
//Si aucun Ã©lÃ©ment .rating n'est trouvÃ©, le script s'arrÃªte (Ã©vite les erreurs JS).
document.addEventListener("DOMContentLoaded", () => {
    const ratingDiv = document.querySelector(".rating");
    if (!ratingDiv) return;

    //SÃ©lectionne toutes les Ã©toiles (.star) Ã  l'intÃ©rieur du conteneur .rating.
    //RÃ©cupÃ¨re lâ€™attribut data-soap-id du conteneur.

    const stars = ratingDiv.querySelectorAll(".star");
    const soapId = ratingDiv.dataset.soapId;

    //Initialise une variable pour stocker la note actuellement active (par dÃ©faut, 0).
    //Si elle a la classe active, on lit sa valeur (data-value).

    //On garde la plus grande valeur rencontrÃ©e.
    // currentRating reflÃ¨te la note dÃ©jÃ  enregistrÃ©e (utile si la page est chargÃ©e avec une note prÃ©existante).
    let currentRating = 0;
    stars.forEach((s) => {
        if (s.classList.contains("active")) {
            const val = parseInt(s.dataset.value);
            if (val > currentRating) currentRating = val;
        }
    });

    //Nouveau parcours de chaque Ã©toile pour leur attacher des Ã©vÃ©nements.
    stars.forEach((star) => {
        const val = parseInt(star.dataset.value);

        //Quand on survole une Ã©toile : On active toutes les Ã©toiles dont la valeur est infÃ©rieure ou Ã©gale Ã  celle survolÃ©e.
        //toutes les Ã©toiles jusquâ€™Ã  celle survolÃ©e sâ€™allument.
        star.addEventListener("mouseover", () => {
            stars.forEach((s) =>
                s.classList.toggle("active", parseInt(s.dataset.value) <= val)
            );
        });

        //On rÃ©active seulement les Ã©toiles correspondant Ã  la note actuellement enregistrÃ©e (currentRating). Ca annule l'effet temporaire du survol.
        star.addEventListener("mouseout", () => {
            stars.forEach((s) =>
                s.classList.toggle(
                    "active",
                    parseInt(s.dataset.value) <= currentRating
                )
            );
        });

        //Si lâ€™utilisateur reclique sur la mÃªme Ã©toile, on remet la note Ã  0 (supprimer la note). Sinon, on met Ã  jour currentRating avec la nouvelle valeur.
        star.addEventListener("click", () => {
            currentRating = currentRating === val ? 0 : val;

            //Met Ã  jour l'affichage des Ã©toiles aprÃ¨s le clic. Seules les Ã©toiles jusqu'Ã  currentRating restent actives.
            stars.forEach((s) =>
                s.classList.toggle(
                    "active",
                    parseInt(s.dataset.value) <= currentRating
                )
            );

            //Envoie la nouvelle note au serveur via fetch().
            //MÃ©thode : POST.
            //En-tÃªtes : JSON + X-Requested-With (prÃ©cise que câ€™est une requÃªte AJAX).
            //Corps (body) : objet JSON contenant soapId et note.
            fetch(SOAP_RATE_URL, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-Requested-With": "XMLHttpRequest",
                },
                //Je met soapID et le rating actuel dans le body json pr l'envoyer de l'autre cÃ´tÃ©
                body: JSON.stringify({ soapId: soapId, note: currentRating }),
            });
        });
    });
});
